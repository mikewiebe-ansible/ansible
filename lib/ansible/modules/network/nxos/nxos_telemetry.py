#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Cisco and/or its affiliates.
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for nxos_telemetry
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': '<support_group>'
}

DOCUMENTATION = """
---
module: nxos_telemetry
version_added: 2.9
short_description: 'Telemetry Monitoring Service (TMS) configuration'
description: 'Manages Telemetry Monitoring Service (TMS) configuration'
author: Mike Wiebe (@mikewiebe)
notes:
  - 'Tested against N9k Version 7.0(3)I7(5) and later.'
options:
  config:
    description: The provided configuration
    type: list
    elements: dict
    suboptions:
      certificate:
        type: dict
        description:
          - Certificate SSL/TLS and hostname values.
          - Value must be a dict defining values for keys (key and hostname).
        suboptions:
          key:
            description:
              - Certificate key
            type: str
          hostname:
            description:
              - Certificate hostname
            type: str
      destination_profile_compression:
        type: str
        description:
          - Destination profile compression method.
        choices:
          - gzip
      destination_profile_source_interface:
        type: str
        description:
          - Destination profile source interface.
          - Valid value is a str representing the source interface name.
      destination_profile_vrf:
        type: str
        description:
          - Destination profile vrf.
          - Valid value is a str representing the vrf name.
      destination_group:
        type: list
        description:
          - List of telemetry destination groups.
        suboptions:
          id:
            type: int
            description:
              - Destination group identifier.
              - Value must be a int representing the destination group identifier.
          destination:
            type: dict
            description:
              - Group destination ipv4, port, protocol and encoding values.
              - Value must be a dict defining values for keys (ip, port, protocol, encoding).
            suboptions:
              ip:
                type: str
                description:
                  - Destination group IP address.
              port:
                type: int
                description:
                  - Destination group port number.
              protocol:
                type: str
                description:
                  - Destination group protocol.
                choices:
                  - HTTP
                  - TCP
                  - UDP
                  - gRPC
              encoding:
                type: str
                description:
                  - Destination group encoding.
                choices:
                  - GPB
                  - JSON
      sensor_group:
        type: list
        description:
          - List of telemetry sensor groups.
        suboptions:
          id:
            type: int
            description:
              - Sensor group identifier.
              - Value must be a int representing the sensor group identifier.
          data_source:
            type: str
            description:
              - Telemetry data source.
            choices:
              - NX-API
              - DME
              - YANG
          path:
            type: dict
            description:
              - Telemetry sensor path.
              - Value must be a dict defining values for keys (name, depth, filter_condition, query_condition).
              - Mandatory Keys (name)
              - Optional Keys  (depth, filter_condition, query_condition)
            suboptions:
              name:
                type: str
                description:
                  - Sensor group path name.
              depth:
                type: str
                description:
                  - Sensor group depth.
              filter_condition:
                type: str
                description:
                  - Sensor group filter condition.
              query_condition:
                type: str
                description:
                  - Sensor group query condition.
      subscription:
        type: list
        description:
          - List of telemetry subscriptions.
        suboptions:
          id:
            type: int
            description:
              - Subscription identifier.
              - Value must be a int representing the subscription identifier.
          destination_group:
            type: int
            description:
              - Associated destination group.
          sensor_group:
            type: dict
            description:
              - Associated sensor group.
              - Value must be a dict defining values for keys (id, sample_interval).
            suboptions:
              id:
                type: int
                description:
                  - Associated sensor group id.
              sample_interval:
                type: int
                description:
                  - Associated sensor group id sample interval.

  state:
    description:
    - Final configuration state
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    default: merged
"""
EXAMPLES = """
# Using deleted

- name: Delete Telemetry Configuration
  nxos_telemetry:
    config:
      destination_profile_source_interface: Ethernet1/1
      destination_profile_vrf: management
      destination_group:
        - id: 2
          destination:
            ip: 192.168.0.2
            port: 50001
            protocol: gPRC
            encoding: GPB
        - id: 55
          destination:
            ip: 192.168.0.55
            port: 60001
            protocol: gPRC
            encoding: GPB
      sensor_group:
        - id: 1
          data_source: NX-API
          path:
            name: '"show lldp neighbors detail"'
            depth: 0
    operation: deleted


# Using merged

- name: Merge Telemetry Configuration
  nxos_telemetry:
    config:
      certificate:
        key: /bootflash/server.key
        hostname: localhost
      destination_profile_compression: gzip
      destination_profile_source_interface: Ethernet1/1
      destination_profile_vrf: management
      destination_group:
        - id: 2
          destination:
            ip: 192.168.0.2
            port: 50001
            protocol: gPRC
            encoding: GPB
        - id: 55
          destination:
            ip: 192.168.0.55
            port: 60001
            protocol: gPRC
            encoding: GPB
      sensor_group:
        - id: 1
          data_source: NX-API
          path:
            name: '"show lldp neighbors detail"'
            depth: 0
        - id: 55
          data_source: DME
          path:
            name: 'sys/ch'
            depth: unbounded
            filter_condition: 'ne(eqptFt.operSt,"ok")'
      subscription:
        - id: 5
          destination_group: 55
          sensor_group:
            id: 1
            sample_interval: 1000
        - id: 6
          destination_group: 2
          sensor_group:
            id: 55
            sample_interval: 2000
    operation: merged


# Using overridden

- name: Override Telemetry Configuration
  nxos_telemetry:
    config:
      certificate:
        key: /bootflash/server.key
        hostname: localhost
      destination_profile_compression: gzip
      destination_profile_source_interface: Ethernet1/1
      destination_profile_vrf: management
      destination_group:
        - id: 2
          destination:
            ip: 192.168.0.2
            port: 50001
            protocol: gPRC
            encoding: GPB
      subscription:
        - id: 5
          destination_group: 55
    operation: overridden


# Using replaced

- name: Override Telemetry Configuration
  nxos_telemetry:
    config:
      certificate:
        key: /bootflash/server.key
        hostname: localhost
      destination_profile_compression: gzip
      destination_profile_source_interface: Ethernet1/1
      destination_profile_vrf: management
      destination_group:
        - id: 2
          destination:
            ip: 192.168.0.2
            port: 50001
            protocol: gPRC
            encoding: GPB
      subscription:
        - id: 5
          destination_group: 55
    operation: replaced


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.nxos.argspec.telemetry.telemetry import TelemetryArgs
from ansible.module_utils.network.nxos.config.telemetry.telemetry import Telemetry


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=TelemetryArgs.argument_spec,
                           supports_check_mode=True)

    result = Telemetry(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
