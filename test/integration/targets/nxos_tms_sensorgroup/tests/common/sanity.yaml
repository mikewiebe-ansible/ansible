---
- debug: msg="START connection={{ ansible_connection }} nxos_tms_sensorgroup sanity test"
- debug: msg="Using provider={{ connection.transport }}"
  when: ansible_connection == "local"

- name: Setup
  nxos_feature: &setup_teardown
    feature: telemetry
    provider: "{{ connection }}"
    state: disabled
  ignore_errors: yes

- block:
  - name: TMS non defaults - present
    nxos_tms_sensorgroup: &tms_non_def
      identifier: "{{ item.identifier }}"
      data_source: "{{ item.data_source }}"
      path:
        name: "{{ item.p_name }}"
        depth: "{{ item.p_depth }}"
        query_condition: "{{ item.p_query_condition }}"
        filter_condition: "{{ item.p_filter_condition }}"
      provider: "{{ connection }}"
    loop: &loop_items
      - { identifier: 2, data_source: NX-API, p_name: sys/bgp, p_depth: 0, p_query_condition: foo, p_filter_condition: foo }
      - { identifier: 2, data_source: NX-API, p_name: sys/bgp/inst, p_depth: unbounded, p_query_condition: foo, p_filter_condition: foo}
      - { identifier: 55, data_source: DME, p_name: 'sys/bgp/inst/dom-default/peer-[10.10.10.11]/ent-[10.10.10.11]', p_depth: 0, p_query_condition: foo, p_filter_condition: foo}
      - { identifier: 55, data_source: DME, p_name: sys/ospf, p_depth: 0, p_query_condition: foo, p_filter_condition: 'or(eq(ethpmPhysIf.operSt,"down"),eq(ethpmPhysIf.operSt,"up"))' }
    register: result

  - assert: &true
      that:
        - "{{ item.changed }} == true"
    with_items: "{{ result.results }}"

  - name: TMS non defaults - present - idempotence
    nxos_tms_sensorgroup: *tms_non_def
    loop: *loop_items
    register: result

  - assert: &false
      that:
        - "{{ item.changed }} == false"
    with_items: "{{ result.results }}"

  - name: TMS change sensorgroup
    nxos_tms_sensorgroup: &tms_change
      identifier: 2
      data_source: DME
      path:
        name: sys/ospf
        depth: unbounded
        filter_condition: 'or(eq(ethpmPhysIf.operSt,"down")'
      provider: "{{ connection }}"
    register: result

  - assert:
      that:
        - "result.changed == true"

  - name: TMS change property - idempotence
    nxos_tms_sensorgroup: *tms_change
    register: result

  - assert:
      that:
        - "result.changed == false"

  - name: Optional parameters - no filter or query condition
    nxos_tms_sensorgroup: &optional_params
      identifier: 75
      data_source: DME
      path:
        name: sys/ospf
        depth: 0
      provider: "{{ connection }}"
    register: result

  - assert:
      that:
        - "result.changed == true"

  - name: Optional parameters - no filter or query condition - idempotence
    nxos_tms_sensorgroup: *optional_params
    register: result

  - assert:
      that:
        - "result.changed == false"

  - name: TMS defaults - absent
    nxos_tms_sensorgroup: &tms_def
      identifier: "{{ item.identifier }}"
      state: absent
      provider: "{{ connection }}"
    loop: &loop_items_absent
      - { identifier: 2, data_source: NX-API, p_name: foo, p_depth: 0, p_query_condition: foo, p_filter_condition: foo }
      - { identifier: 55, data_source: DME, p_name: roo, p_depth: 0, p_query_condition: foo, p_filter_condition: foo }
    register: result

  - assert:
      that:
        - "{{ item.changed }} == true"
    with_items: "{{ result.results }}"

  - name: TMS defaults - absent - idempotence
    nxos_tms_sensorgroup: *tms_def
    loop: *loop_items_absent
    register: result

  - assert:
      that:
        - "{{ item.changed }} == false"
    with_items: "{{ result.results }}"

  always:
  - name: Teardown
    nxos_feature: *setup_teardown
    ignore_errors: yes

  - debug: msg="END connection={{ ansible_connection }} nxos_tms_sensorgroup sanity test"
